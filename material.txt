Bibliografia
	Ian Sommerville, Engenharia de Software, 9. ed., Pearson Prentice Hall, 2011.
	Marco Tulio Valente, Engenharia de Software Moderna: Princípios e práticas para desenvolvimento de software com produtividade, 2020.

Software
	Conjunto composto por instruções de computador, estruturas de dados e documentos
	* Atualmente, software está em TODO lugar!

	Características
		Complexidade
		Tamanho
		Finalidade
		Área fim

	Atributos
		Confiança
		Eficácia/eficiência
		Usabilidade (compatibilidade)
		Facilidade de manutenção/evolução

	projeto-balanço.jpg

Engenharia de Software
	Aplicação de uma abordagem sistemática, disciplinada e quantificável para a especificação, desenvolvimento, operação, manutenção e evoluir do software. Alia métodos, técnicas e ferramentas no processo de produção de softwares para reduzir custos, gerenciar prazos e recursos, melhorar a qualidade do produto e aumentar a satisfação do cliente.

	Histórico
		195X
			Centralização do hardware (centros de pesquisa)
			Softwares específicos
			Desenvolvimento de software sem utilizar técnicas de engenharia
		196X
			Popularização do hardware (microprocessadores)
			Grandes sistemas de software nas organizações
				Erros nas estimativas de recursos
				Descumprimento de prazos
				Custos altos
				Insatisfação dos clientes (expectativa)
			Conferência da OTAN

	Princípios
		Formalidade
		Evitar dependência de pessoas ou processos
		Abstrair aspectos importantes
		Subdividir problemas complexos
		Reutilizar resultados
		Flexibilização e modularização para facilitar a manutenção
		Facilitar a evolução (funcionalidades e usabilidade)

	Não existe bala de prata
		Dificuldades essenciais (não podem ser resolvidas)
			Complexidade
			Conformidade (adaptação a um ambiente mutável)
			Facilidade de mudanças (correções e adições)
			Invisibilidade (dificuldade de estimar características)
		Dificuldades acidentais (podem ser resolvidas)
			Problemas nos ambientes
			Documentação inadequada

	Áreas SWEBOK

		1. Engenharia de Requisitos
			Funcionais (o que faz, escopo)
			Não-funcionais

		2. Projeto de Software
			Coesão
			Acoplamento
			Padrões de projeto
			Padrões de arquitetura

		3. Construção de Software
			Legibilidade
			Manutenibilidade
			Desenvolvimento (como faz)

		4. Testes de Software
			Defeitos, erros, bugs, falhas e faltas
				* Nem todo defeito ou bug ocasiona falha!
			Verificação (fazendo a coisa do jeito certo?)
			Validação (fazendo a coisa certa?)
			Integração
			Performance
			Usabilidade
			Aceitação (início a fim)

		5. Manutenção de Software
			Corretiva (bugs relatados)
			Preventiva (bugs antes de serem relatados)
			Adaptativa (reação à mudanças legais, tecnológicas, usabilidade)
			Refatoração (melhoria de código/projeto)
			Evolutiva (novas funcionalidades)
			* Sistemas legados

		6. Gerência de Configuração
			Versionamento
			Ambientes

		7. Gerência de Projetos
			Negociação de contratos (prazos, valores, cronogramas, produtos)
			Gerência de recursos humanos (contratação, treinamento, promoção, remuneração)
			Gerência de riscos

			Lei de Brooks
				A inclusão de novos desenvolvedores em um projeto que está atrasado contribui para torná-lo ainda mais atrasado

		8. Processos de Software
			Cascata
			Incrementais/iterativos (ágeis)

		9. Modelos de Software
			Não orientados a objetos
			Orientados a objetos (UML)

		10. Qualidade de Software
			Externa (sem analise do código)
				Robustez, eficiência, facilidade de uso
			Interna (com analise do código)
				Quantidade de linhas, complexidade ciclomática, MTBF

		11. Prática Profissional
			Ética

		12. Aspectos Econômicos

	Desafios
		Envolvimento (clientes)
		Confiança (clientes)
		Comunicação efetiva
		Heterogeneidade (clientes, infraestrutura, sistemas, fornecedores)
		Estimativas confiáveis (complexidade, características do time)
		Entregas mais rápidas

	Exercício de descrever a figura com os papéis cliente, analista e desenvolvedor

==========

Elencar e definir:
a) 5 tipos de software
b) 5 métodos, técnicas e ferramentas utilizados na ES
c) 2 técnicas de elicitação de requisitos
d) 2 processos de software
e) 2 padrões de arquitetura de software

==========

Engenharia de Requisitos
	Descobrir, definir e manter os requisitos de um sistema em construção
	Evitar situações de mau entendimento

	Requisito
		É um conjunto de necessidades estabelecidas pelo cliente que definem a estrutura e o comportamento do sistema em construção sob determinadas condições/restrições

		Funcionais
			Funcionalidade básicas desejadas (o que faz, escopo)
				* Entrada -> processamento -> saída
				* O QUE FAZ e não COMO FAZ!
			Maior prioridade, obrigatórios
			* Sistema não atinge objetivos sem elas

		Não-Funcionais
			Qualidades
				Funcionalidade
				Usabilidade
				Confiabilidade (funcionamento sob condições estabelecidas durante um tempo estabelecido)
					 MTBF & MTTR
 				Eficiência (desempenho e recursos utilizados sob condições estabelecidas)
				Manutenibilidade
				Portabilidade
				Outras restrições
					Interfaces com o usuário
					Segurança
			Menor prioridade, opcionais (se der tempo)
			* Sistema atinge objetivos sem elas 

	Características
		Correto: se são funcionalidades que o sistema deve cumprir
		Não-ambíguo: se tem apenas uma interpretação
		Completo: se todas as funcionalidades do sistema estiverem descritas
		Consistente: se não tem conflitos entre requisitos
		Verificável: se foi concretizado ou não
		Modificável: mudanças fáceis, completas e consistentes
		Rastreável: origem e evolução (timeline) claras

	Elicitação -> documento, assinado pelo cliente
		Descobrir, tornar explícito, obter o máximo de informações para o conhecimento de algo
		Stakeholders
		* INTERAÇÃO E COMUNICAÇÃO!
		* O óbvio deve ser dito!

		Atividades
			Entendimento do domínio (escopo, atividades do cliente)
			Coleta e classificação (RF/RNF, prioridades)
			Especificação (documentação - linguagem natural, representações, diagramas, métricas)
			Resolução de conflitos
			Validação dos requisitos
				1) corretos, não-ambíguos, completos, consistentes, verificáveis
				2) de acordo com as necessidades e solicitações dos clientes

		Dificuldades
			Stakeholders podem não ter uma idéia precisa do que o sistema deve fazer
				* Eles quase nunca têm!
				* A idéia deles varia com o tempo!
			Stakeholders têm dificuldades para descrever o domínio do problema
				* Toda informação é relevante! (SQN!)
			Stakeholders podem sabotar a elicitação 
			Questões organizacionais ou políticas
				* Resistência em compartilhar informações confidenciais
			Uso de dialetos técnicos tanto pelos stakeholders quanto pelos analistas
			Analistas inexperientes

		Técnicas
			Entrevistas (contato direto com cliente, validação imediata)
				Fechadas (conjunto de questões pré-definidas)
				Abertas (discussão de forma aberta, plano)
				Tutoriais (aula do cliente)
			Leitura de documentos (volume de trabalho)
			Questões de múltipla escolha (pré conhecimento sobre problema, limita respostas)
			Participação ativa dos usuários (brainstorm)
			Cenários/user stories (caminho feliz e caminhos tristes)
			Observações e análise sociais/etnografia (observação in-loco, aprovações, tempo, deslocamento)
			Prototipação
			* Geralmente se utiliza mais de uma técnica, dependendo do problema e da equipe participante

		Especificação
			* Requisitos mudam com o tempo!

			Documento de requisitos
				Processo cascata
				Complexo

				IEEE-830-1996.pdf & IEEE-29148-2011.pdf

				documento-requisitos-exemplo1.pdf & documento-requisitos-exemplo2.pdf

			Histórias de usuários
				Processo ágil
				Simplificado
				Como um ??? eu preciso/quero ??? para ??? 

				INVEST
					Independentes (sem acoplamento)
					Negociáveis (detalhes de negócio ou desenvolvimento)
					Valor (funcionalidade associada)
					Estimáveis (tempo e esforço)
					Sucintas
					Testáveis (teste de aceitação do usuário)

				jira userhistory1.png & jira userhistory2.png

	Exercício
		Criar mapa mental com idéias para um negócio
		Elencar requisitos sobre o negócio utilizando no mínimo 3 técnicas de elicitação
		Escrever um documento de requisitos com no mínimo 3 requisitos funcionais e 3 não funcionais

==========

Elencar e definir:
a) 3 stakeholders
b) 3 outras técnicas de elicitação de requisitos

Explicar resumidamente o documento de requisitos:
a) Padrão IEEE 830/1998

